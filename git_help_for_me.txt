персонализация git
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com

проверка первоначальных настроек
 git config --list
-----------------------------------------------
посмотреть сгенерирован ли ключ здесь ssh
$ cd ~/.ssh
$ ls
---------------------------------------------------

git init
git add .
git commit -a -m 'first commit'

Для того, чтобы в систему не попадали временные файлы, можно их занести в файл .gitignore, который нужно создать самостоятельно и разместить в корневом каталоге проекта (на том же уровне, что и .git директория)

qtcreator уже делает первые три пункта

git remote add origin git@github.com:username/reponame.git
git push -u origin master



-------------------------------------------------------------------------------
Для того, чтобы отменить регистрацию удаленного репозитария введите:

git remote rm origin


Это может понадобиться, если вы захотите поменять SSH доступ на HTTPS. После этого можно добавить его опять, например под именем github и протоколом HTTPS.

git remote add github https://github.com/myuser/project.git


Следующей командой вы занесете все изменения на Github, которые были сделаны в локальном репозитории .

git push -u origin master


Ключ -u используется для того, чтобы установить связь между удаленным репозиторием github(origin) и вашей веткой master. Все дальнейшие изменения вы можете переносить на удаленный репозиторий упрощенной командой.

git push


перед git push может может понадобиться команда git pull

----------------------------------------------------------------------

Что бы создать новую ветку локально следует добавить параметр -b к команде checkout.

git checkout -b <name_of_branch>

--------------------------------------------------------------------------


Допустим, мы создали новую ветку в локальном репозитории. Новая ветка создавалась следующей командой:


$ git checkout -b dev

Switched to a new branch 'dev'


Для публикации в удаленном репозитарии можно использовать следующую команду: 


$ git push origin dev

Total 0 (delta 0), reused 0 (delta 0)

To git@github.com:devlabuser/sharp.git

 * [new branch]      dev -> dev


Однако, такая команда не сделает ветку dev на удаленном репозитарии отслеживаемой и связанной с локальной. Поэтому, лучше всего воспользоваться опцией --set-upstream:


$ git push --set-upstream origin dev


Или, что то же самое, но с сокращенным именем опции:


$ git push -u origin dev


После этой команды локальная ветка dev и ветка dev в репозитарии будут связаны между собой. То есть, после такой команды (которая выполняется единожды), можно будет отправлять/принимать изменения лишь выполняя git push из ветки без указания всяких алиасов для сервера и удалённых веток. Это сделано просто для удобства. 



---------------------------------------------------------------------------

Удалить ветку на сервере

git push origin --delete имя_ветки
-----------------------------
удалить ветку в локальной рабочей копии:
$ git branch -d branch-name
----------------------------
 Переименовать локальную ветку

git branch -m oldname newname

-----------------------------------------------------------------------------------

Для того чтобы удалить все файлы в папке, которые не относятся к проекту и не сохранены в репозитории, можно воспользоваться командой:

git clean -df
------------------------------------------------------------------------------------


